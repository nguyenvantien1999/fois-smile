package com.fois.Back_end_fois_smile.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class AccountExample {
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    protected String orderByClause;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    protected boolean distinct;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public AccountExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andMatkIsNull() {
            addCriterion("matk is null");
            return (Criteria) this;
        }

        public Criteria andMatkIsNotNull() {
            addCriterion("matk is not null");
            return (Criteria) this;
        }

        public Criteria andMatkEqualTo(Integer value) {
            addCriterion("matk =", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkNotEqualTo(Integer value) {
            addCriterion("matk <>", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkGreaterThan(Integer value) {
            addCriterion("matk >", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkGreaterThanOrEqualTo(Integer value) {
            addCriterion("matk >=", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkLessThan(Integer value) {
            addCriterion("matk <", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkLessThanOrEqualTo(Integer value) {
            addCriterion("matk <=", value, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkIn(List<Integer> values) {
            addCriterion("matk in", values, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkNotIn(List<Integer> values) {
            addCriterion("matk not in", values, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkBetween(Integer value1, Integer value2) {
            addCriterion("matk between", value1, value2, "matk");
            return (Criteria) this;
        }

        public Criteria andMatkNotBetween(Integer value1, Integer value2) {
            addCriterion("matk not between", value1, value2, "matk");
            return (Criteria) this;
        }

        public Criteria andUsernameIsNull() {
            addCriterion("username is null");
            return (Criteria) this;
        }

        public Criteria andUsernameIsNotNull() {
            addCriterion("username is not null");
            return (Criteria) this;
        }

        public Criteria andUsernameEqualTo(String value) {
            addCriterion("username =", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotEqualTo(String value) {
            addCriterion("username <>", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThan(String value) {
            addCriterion("username >", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameGreaterThanOrEqualTo(String value) {
            addCriterion("username >=", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameLessThan(String value) {
            addCriterion("username <", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameLessThanOrEqualTo(String value) {
            addCriterion("username <=", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameLike(String value) {
            addCriterion("username like", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotLike(String value) {
            addCriterion("username not like", value, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameIn(List<String> values) {
            addCriterion("username in", values, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotIn(List<String> values) {
            addCriterion("username not in", values, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameBetween(String value1, String value2) {
            addCriterion("username between", value1, value2, "username");
            return (Criteria) this;
        }

        public Criteria andUsernameNotBetween(String value1, String value2) {
            addCriterion("username not between", value1, value2, "username");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNull() {
            addCriterion("password is null");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNotNull() {
            addCriterion("password is not null");
            return (Criteria) this;
        }

        public Criteria andPasswordEqualTo(String value) {
            addCriterion("password =", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotEqualTo(String value) {
            addCriterion("password <>", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThan(String value) {
            addCriterion("password >", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanOrEqualTo(String value) {
            addCriterion("password >=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThan(String value) {
            addCriterion("password <", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanOrEqualTo(String value) {
            addCriterion("password <=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLike(String value) {
            addCriterion("password like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotLike(String value) {
            addCriterion("password not like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordIn(List<String> values) {
            addCriterion("password in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotIn(List<String> values) {
            addCriterion("password not in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordBetween(String value1, String value2) {
            addCriterion("password between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotBetween(String value1, String value2) {
            addCriterion("password not between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andLoaitkIsNull() {
            addCriterion("loaitk is null");
            return (Criteria) this;
        }

        public Criteria andLoaitkIsNotNull() {
            addCriterion("loaitk is not null");
            return (Criteria) this;
        }

        public Criteria andLoaitkEqualTo(Integer value) {
            addCriterion("loaitk =", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkNotEqualTo(Integer value) {
            addCriterion("loaitk <>", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkGreaterThan(Integer value) {
            addCriterion("loaitk >", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkGreaterThanOrEqualTo(Integer value) {
            addCriterion("loaitk >=", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkLessThan(Integer value) {
            addCriterion("loaitk <", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkLessThanOrEqualTo(Integer value) {
            addCriterion("loaitk <=", value, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkIn(List<Integer> values) {
            addCriterion("loaitk in", values, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkNotIn(List<Integer> values) {
            addCriterion("loaitk not in", values, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkBetween(Integer value1, Integer value2) {
            addCriterion("loaitk between", value1, value2, "loaitk");
            return (Criteria) this;
        }

        public Criteria andLoaitkNotBetween(Integer value1, Integer value2) {
            addCriterion("loaitk not between", value1, value2, "loaitk");
            return (Criteria) this;
        }

        public Criteria andThoigiandnIsNull() {
            addCriterion("thoigiandn is null");
            return (Criteria) this;
        }

        public Criteria andThoigiandnIsNotNull() {
            addCriterion("thoigiandn is not null");
            return (Criteria) this;
        }

        public Criteria andThoigiandnEqualTo(Date value) {
            addCriterionForJDBCDate("thoigiandn =", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnNotEqualTo(Date value) {
            addCriterionForJDBCDate("thoigiandn <>", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnGreaterThan(Date value) {
            addCriterionForJDBCDate("thoigiandn >", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("thoigiandn >=", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnLessThan(Date value) {
            addCriterionForJDBCDate("thoigiandn <", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("thoigiandn <=", value, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnIn(List<Date> values) {
            addCriterionForJDBCDate("thoigiandn in", values, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnNotIn(List<Date> values) {
            addCriterionForJDBCDate("thoigiandn not in", values, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("thoigiandn between", value1, value2, "thoigiandn");
            return (Criteria) this;
        }

        public Criteria andThoigiandnNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("thoigiandn not between", value1, value2, "thoigiandn");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table schema01.account
     * @mbg.generated  Thu May 06 20:20:23 ICT 2021
     */
    public static class Criterion {
        private String condition;
        private Object value;
        private Object secondValue;
        private boolean noValue;
        private boolean singleValue;
        private boolean betweenValue;
        private boolean listValue;
        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table schema01.account
     *
     * @mbg.generated do_not_delete_during_merge Mon Apr 26 09:55:09 ICT 2021
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }
}